// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import models "github.com/NodeFactoryIo/vedran/internal/models"

// PingRepository is an autogenerated mock type for the PingRepository type
type PingRepository struct {
	mock.Mock
}

// FindByNodeID provides a mock function with given fields: nodeId
func (_m *PingRepository) FindByNodeID(nodeId string) (*models.Ping, error) {
	ret := _m.Called(nodeId)

	var r0 *models.Ping
	if rf, ok := ret.Get(0).(func(string) *models.Ping); ok {
		r0 = rf(nodeId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Ping)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(nodeId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *PingRepository) GetAll() (*[]models.Ping, error) {
	ret := _m.Called()

	var r0 *[]models.Ping
	if rf, ok := ret.Get(0).(func() *[]models.Ping); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]models.Ping)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ping
func (_m *PingRepository) Save(ping *models.Ping) error {
	ret := _m.Called(ping)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Ping) error); ok {
		r0 = rf(ping)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
